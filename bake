#!/usr/bin/env bash

SCRIPT="CMakeTool"
VERSION="1.0.0"
AUTHOR="Brian Ferri (https://github.com/brianferri)"

# Arguments
PROJECT_NAME=$(basename "$(pwd)" | tr '[:upper:]' '[:lower:]')
CWD=$(pwd)
ARGUMENTS=("$@")

# Default values
CONFIGURATION=""
SKIP_CONFIRMATION=false
OUT_DIR="build"

# Flags
DEBUG=false

ok() { # Print a green [OK]
    local message="$1"
    echo -e "\033[1;32m[OK]\033[0m $message"
}

info() { # Print a cyan [INFO]
    local message="$1"
    echo -e "\033[1;36m[INFO]\033[0m $message"
}

warn() { # Print a yellow [WARN]
    local message="$1"
    echo -e "\033[1;33m[WARN]\033[0m $message"
}

error() { # Print a red [ERROR]
    local message="$1"
    local error_code="$3"
    echo -e "\033[1;31m[ERROR]\033[0m $message"
    if [[ "$2" == "true" ]]; then
        if [[ -z "$error_code" ]]; then
            exit 1
        else
            exit "$error_code"
        fi
    fi
}

echo_debug() { # Print a purple [DEBUG]
    if [[ "$DEBUG" == "true" ]]; then
        local string="$1"
        echo -e "\033[1;35m[DEBUG]\033[0m $string"
    fi
}

if_empty_abort() {
    local variable="$1"
    if [[ -z "$variable" ]]; then
        error "Aborting..." true
    fi
}

ask() {
    local string="$1"
    local abort_on_refuse="$2"

    if [[ "$SKIP_CONFIRMATION" == "false" ]]; then
        if [[ -z "$string" ]]; then
            error "No string provided for the ask function" true
        fi
        echo -e "\033[93;4m$string\033[0m"
        read -r -p "Continue? [y/N] " response
        if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
            ok "Continuing..."
        else
            if [[ "$abort_on_refuse" == "true" ]]; then
                error "Aborting..." true
            else
                warn "Continuing..."
                return 1
            fi
        fi
    fi
}

require_fzy() {
    if ! command -v fzy >/dev/null 2>&1; then
        error "fzy is not installed, which is needed for the next step."
        ask "Do you want to install fzy with brew?" true
        info "Installing fzy..."
        brew install fzy
    fi
}

print_debug_info() {
    echo_debug "Script version: $VERSION"
    echo_debug "CWD: $CWD"
    echo_debug "Bash version: $BASH_VERSION"
    echo_debug "Brew version: $(brew --version)"
    echo_debug "$(fzy --version)"
}

version() {
    echo -e "\033[3m$SCRIPT v$VERSION - $AUTHOR\033[23m"
    exit 0
}

help() {
    echo -e "\033[93;4mUsage:\033[0m"
    echo -e "\t\033[3m$0 <command> [options]\033[23m"

    echo -e "\033[93;4mCommands:\033[0m"
    echo -e "  build <configuration>    \tBuild the project"
    echo -e "  run    \t\tRun the project"
    echo -e "  clean    \t\tClean the project"
    echo -e "  help    \t\tView this help"
    echo -e "  version    \t\tView the version"
    echo -e "  debug    \t\tEnable debug mode"

    echo -e "\033[93;4mExamples:\033[0m"
    echo -e "  \033[3m$0 build\033[23m"
    echo -e "  \033[3m$0 run\033[23m"
    echo -e "  \033[3m$0 build run\033[23m"

    echo ""
    print_debug_info
    version
}

get_config() {
    CONFIGURATIONS=("Debug" "Release" "MinSizeRel" "RelWithDebInfo")
    for argument in "${ARGUMENTS[@]}"; do
        for configuration in "${CONFIGURATIONS[@]}"; do
            if [[ "$argument" == "$configuration" ]]; then
                if [[ "$CONFIGURATION" != "" ]]; then
                    error "Multiple configurations found, please specify only one" true
                fi
                CONFIGURATION="$argument"
                ARGUMENTS=("${ARGUMENTS[@]/$argument/}")
            fi
        done
    done
    if [[ "${#CONFIGURATIONS[@]}" -eq 1 ]]; then
        CONFIGURATION="${CONFIGURATIONS[*]}"
    fi
    if [[ "$CONFIGURATION" == "" ]]; then
        require_fzy
        CONFIGURATION=$(printf '%s\n' "${CONFIGURATIONS[@]}" | fzy)
        if [[ "$CONFIGURATION" == "" ]]; then
            error "No configuration selected, aborting..." true 126
        fi
    fi
}

parse_arguments() {
    # Single option parsing
    if [[ "$*" == *"debug"* ]]; then
        DEBUG=true
        ARGUMENTS=("${ARGUMENTS[@]/debug/}")
    fi

    get_config

    if [ -z "$1" ]; then
        error "No function supplied" true
    fi

    # Multi option parsing
    HAS_RUN_VALID_COMMAND=true
    while [[ $# -gt 0 ]]; do
        case "$1" in
        "$1")
            function_name="$1"
            if [ "$(type -t "$function_name")" = "function" ]; then
                echo_debug "Executing $function_name"
                echo_debug "Arguments:\n\t"
                echo_debug "$@"
                $function_name "$@"
            fi
            ;;
        *)
            error "Unknown option $1, make sure you are using the correct syntax"
            print_help
            exit 1
            ;;
        esac
        shift
    done
    if [[ "$HAS_RUN_VALID_COMMAND" == "false" ]]; then
        help
    fi
}

build() {
    echo_debug "Building project for $CONFIGURATION"
    cmake -S . -B ./$OUT_DIR -DCMAKE_BUILD_TYPE="$CONFIGURATION"

    if cmake --build ./$OUT_DIR --config "$CONFIGURATION"; then
        ok "Project built successfully"
    else
        error "Project build failed" true
    fi
}

run() {
    if [ -f "./$OUT_DIR/output/$CONFIGURATION/$PROJECT_NAME" ]; then
        ./$OUT_DIR/output/"$CONFIGURATION"/"$PROJECT_NAME"
    else
        error "Executable not found" true
    fi
    ok "Project executed successfully"
}

clean_output() {
    rm -rf ./$OUT_DIR/output/
}

clean() {
    shift 1
    if [[ "$1" == "all" ]]; then
        rm -rf ./$OUT_DIR
        ok "Project cleaned successfully"
    else
        clean_output
        ok "Project cleaned successfully"
    fi
}

verify_setup() {
    if [[ "$OSTYPE" != "darwin"* && "$OSTYPE" != "linux-gnu" ]]; then
        error "This script is only supported on MacOS and Linux." true
    fi
}

verify_setup
parse_arguments "${ARGUMENTS[@]}"
